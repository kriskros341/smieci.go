services:
  postgres:
    image: postgres:16.2
    restart: unless-stopped
    container_name: postgres
    env_file:
      - .env
    environment:
      - HOST=postgres
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/pgdata
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    env_file:
      - .env
    environment:
      - HOST=postgres
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
        "up",
      ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my-network
    volumes:
      - ./src/backend/migrations:/migrations

  api:
    env_file:
      - .env
    environment:
      - HOST=postgres
    ports:
      - "8080:8080"
    build:
      context: ./src/backend
      dockerfile: ./Dockerfile
    container_name: api
    networks:
      - my-network
    depends_on:
      migrate:
        condition: service_completed_successfully

  service:
    env_file:
      - .env
    environment:
      - HOST=postgres
    ports:
      - "6969:6969"
    build:
      context: ./src/services/trash-detection
      dockerfile: ./Dockerfile
    container_name: trash-detection

  cron:
    env_file:
      - .env
    environment:
      - HOST=postgres
    build:
      context: ./src/backend
      dockerfile: ./cron/Dockerfile
    container_name: cron
    networks:
      - my-network
    depends_on:
      migrate:
        condition: service_completed_successfully

networks:
  my-network:
    driver: bridge
volumes:
  db_data:
